generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  totalScore         Int                @default(0)
  createdAt          DateTime           @default(now())
  accounts           Account[]
  leaderboardEntries LeaderboardEntry[]
  Quiz               Quiz[]
  quizResults        QuizResult[]
  sessions           Session[]
  userPreferences    UserPreferences?
  studyPlans         StudyPlan[]
  userLessonProgress UserLessonProgress[]
  userCertificates   UserCertificate[]
  achievements       Achievement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subject {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String?
  icon         String?
  color        String?
  createdAt    DateTime       @default(now())
  LearningPath LearningPath[]
  Quiz         Quiz[]
  lessons      Lesson[]
  resources    Resource[]
  userLessonProgress UserLessonProgress[]
  userCertificates   UserCertificate[]
}

model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  icon          String?
  color         String?
  iconColor     String?
  questionCount Int      @default(0)
  createdAt     DateTime @default(now())
}

model LearningPath {
  id                String   @id @default(cuid())
  title             String
  description       String
  category          String
  difficulty        String
  estimatedDuration String?
  prerequisites     String[]
  progress          Float    @default(0)
  isActive          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Subject           Subject  @relation(fields: [category], references: [name])
}

model LearningResource {
  id            String   @id @default(cuid())
  title         String
  type          String
  url           String
  difficulty    String
  category      String
  topic         String
  description   String?
  duration      String?
  readTime      String?
  provider      String?
  rating        Float?
  tags          String[]
  language      String?
  isFree        Boolean?
  certification Boolean?
  createdAt     DateTime @default(now())
}

model LeaderboardEntry {
  id        String   @id @default(cuid())
  userId    String
  score     Int
  quizzes   Int
  streak    Int
  badge     String?
  subjects  String[]
  timeframe String
  rank      Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model QuizResult {
  id                String   @id @default(cuid())
  quizId            String
  userId            String?
  score             Int
  totalQuestions    Int
  timeSpent         Int?
  date              DateTime @default(now())
  category          String?  // Added to match TypeScript interface
  difficulty        String?  // Added to match TypeScript interface
  questionsAnswered String?  // JSON string to store question details
  Quiz              Quiz     @relation(fields: [quizId], references: [id])
  user              User?    @relation(fields: [userId], references: [id])
}

model Question {
  id              String   @id
  question        String
  options         String[]
  correctAnswer   String
  explanation     String?
  category        String
  difficulty      String
  topic           String?
  relatedConcepts String[]
  quizId          String?
  createdAt       DateTime @default(now())
  Quiz            Quiz?    @relation(fields: [quizId], references: [id])
}

model Quiz {
  id         String       @id
  userId     String?
  category   String
  difficulty String
  createdAt  DateTime     @default(now())
  Question   Question[]
  Subject    Subject      @relation(fields: [category], references: [name])
  User       User?        @relation(fields: [userId], references: [id])
  QuizResult QuizResult[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Missing models that were dropped but are still referenced in API routes
model Lesson {
  id                String                @id @default(cuid())
  title             String
  type              String
  content           String
  duration          String?
  order             Int
  isFree            Boolean               @default(true)
  subjectId         String
  subject           Subject               @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  resources         Resource[]
  userProgress      UserLessonProgress[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  type        String
  url         String
  description String?
  subjectId   String?
  lessonId    String?
  subject     Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserLessonProgress {
  id         String   @id @default(cuid())
  userId     String
  subjectId  String
  lessonId   String
  completedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model UserCertificate {
  id             String   @id @default(cuid())
  userId         String
  subjectId      String
  issuedAt       DateTime @default(now())
  certificateUrl String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject        Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId])
}

model UserPreferences {
  id                        String   @id @default(cuid())
  userId                    String   @unique
  learningStyle             String   @default("mixed")
  preferredTimeOfDay        String?
  studySessionDuration      Int      @default(30)
  weeklyStudyHours          Int      @default(10)
  preferredDifficulty       String   @default("beginner")
  preferredSubjects         String[]
  quizTimeLimit             Int?
  showExplanations          Boolean  @default(true)
  enableSmartRecommendations Boolean  @default(true)
  enableStudyPlans          Boolean  @default(true)
  enableProgressTracking    Boolean  @default(true)
  enableAdaptiveLearning    Boolean  @default(true)
  emailNotifications        Boolean  @default(true)
  pushNotifications         Boolean  @default(true)
  weeklyProgressReport      Boolean  @default(true)
  achievementAlerts         Boolean  @default(true)
  targetScore               Int?
  targetSubjects            String[]
  learningGoals             String[]
  quizSetPreferences        Json?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudyPlan {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String
  subject           String
  category          String?
  difficulty        String
  duration          String
  goals             String[]
  milestones        Json?
  progress          Float    @default(0)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String?
  criteria    Json?
  points      Int      @default(0)
  userId      String?  // Added to track which user earned this achievement
  earned      Boolean  @default(false) // Added to track if achievement is earned
  earnedAt    DateTime? // Added to track when achievement was earned
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id              String   @id @default(cuid())
  question        String
  options         String[]
  correctAnswer   String
  explanation     String?
  category        String
  difficulty      String
  topic           String?
  tags            String[]
  relatedConcepts String[] // Added to match TypeScript interface
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
