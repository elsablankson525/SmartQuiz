// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  hashedPassword String?
  leaderboardEntries LeaderboardEntry[]
  achievements  Achievement[]
  studyPlans    StudyPlan[]
  quizResults   QuizResult[]
  createdAt     DateTime @default(now())
  totalScore    Int      @default(0) // Added: stores the user's total score
  userLessonProgress UserLessonProgress[]
  userCertificates UserCertificate[]
  userPreferences UserPreferences?
  quizSetRecommendations QuizSetRecommendation[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String?
  color       String?
  iconColor   String?
  questionCount Int?
  subjects    Subject[]
  quizzes     QuizQuestion[]
}

model Subject {
  id          String   @id @default(cuid())
  name        String   @unique
  icon        String?
  description String
  color       String?
  borderColor String?
  topics      String[]
  quizzes     Int?
  learners    Int?
  avgTime     String?
  difficulty  String?
  rating      Float?
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  lessons     Lesson[]
  resources   Resource[]
  userLessonProgress UserLessonProgress[]
  userCertificates UserCertificate[]
}

model LearningPath {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  difficulty  String
  duration    String?
  modules     Int?
  enrolled    Int?
  rating      Float?
  progress    Int?
  color       String?
  icon        String?
  skills      String[]
  instructor  String?
  isPopular   Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  milestones  Milestone[]
}

model Milestone {
  id            String   @id @default(cuid())
  title         String
  description   String
  requiredScore Int
  quizTopics    String[]
  resources     String[]
  isCompleted   Boolean  @default(false)
  completedAt   DateTime?
  learningPath  LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId String
}

model LearningResource {
  id          String   @id @default(cuid())
  title       String
  type        String
  url         String
  difficulty  String
  category    String
  topic       String
  description String
  readTime    String?
  duration    String?
  provider    String?
  rating      Float?
  tags        String[]
  language    String?
  isFree      Boolean?
  certification Boolean?
}

model QuizQuestion {
  id            String   @id @default(cuid())
  question      String
  options       String[]
  correctAnswer String
  explanation   String?
  difficulty    String
  topic         String?
  relatedConcepts String[]
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String?
}

model LeaderboardEntry {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  name      String
  avatar    String?
  score     Int
  quizzes   Int
  streak    Int
  badge     String?
  subjects  String[]
  timeframe String
  rank      Int
}

// The Achievement table should be seeded with all possible badges (one row per badge, no userId by default).
model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String?
  earned      Boolean?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model StudyPlan {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  category    String
  week        Int
  focus       String
  resources   String[]
  quizTopics  String[]
  goals       String[]
}

model QuizResult {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  category        String
  difficulty      String
  score           Int
  totalQuestions  Int
  timeSpent       Int
  date            DateTime @default(now())
  questionsAnswered Json?
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  type        String // video, article, quiz, resource
  content     String // URL for video/resource, markdown for article, etc.
  duration    String?
  order       Int
  isFree      Boolean? @default(true)
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String
  resources   Resource[]
  userLessonProgress UserLessonProgress[]
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  type        String // video, article, download, link
  url         String
  description String?
  subject     Subject? @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   String?
  lesson      Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String?
}

model UserLessonProgress {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId  String
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId   String
  completedAt DateTime @default(now())

  @@unique([userId, lessonId])
}

model UserCertificate {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  subject       Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId     String
  issuedAt      DateTime @default(now())
  certificateUrl String?

  @@unique([userId, subjectId])
}

model UserPreferences {
  id                    String   @id @default(cuid())
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  
  // Learning preferences
  learningStyle         String   @default("mixed") // visual, reading, practice, mixed
  preferredTimeOfDay    String?  // morning, afternoon, evening, night
  studySessionDuration  Int      @default(30) // minutes
  weeklyStudyHours      Int      @default(10) // hours per week
  
  // Quiz preferences
  preferredDifficulty   String   @default("beginner") // beginner, intermediate, advanced, adaptive
  preferredSubjects     String[] // Array of subject names
  quizTimeLimit         Int?     // seconds per question (null = no limit)
  showExplanations      Boolean  @default(true)
  
  // Recommendation preferences
  enableSmartRecommendations Boolean @default(true)
  enableStudyPlans           Boolean @default(true)
  enableProgressTracking      Boolean @default(true)
  enableAdaptiveLearning      Boolean @default(true)
  
  // Notification preferences
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  weeklyProgressReport  Boolean @default(true)
  achievementAlerts     Boolean @default(true)
  
  // Performance goals
  targetScore           Int?     // Target percentage score
  targetSubjects        String[] // Subjects to focus on
  learningGoals         String[] // Array of goal descriptions
  
  // Quiz set specific preferences
  quizSetPreferences    Json?    // Store preferences for each quiz set
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([userId])
}

model QuizSetRecommendation {
  id                    String   @id @default(cuid())
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  quizSetId             String   // e.g., "mathematics-beginner"
  subject               String
  difficulty            String
  
  // Performance tracking
  lastScore             Int?
  bestScore             Int?
  averageScore          Float?
  attemptsCount         Int      @default(0)
  totalTimeSpent        Int      @default(0) // seconds
  
  // Recommendation data
  currentLevel          String   @default("beginner") // beginner, intermediate, advanced, adaptive
  recommendedNextLevel  String?
  weakAreas             String[]
  strongAreas           String[]
  
  // Study plan tracking
  currentStudyPlan      Json?    // Current study plan data
  studyPlanProgress     Int      @default(0) // percentage complete
  lastStudySession      DateTime?
  
  // Resource usage
  recommendedResources  String[] // Array of resource IDs
  completedResources    String[] // Array of completed resource IDs
  
  // Adaptive learning data
  learningPace          String   @default("moderate") // slow, moderate, fast
  confidenceLevel       String   @default("moderate") // low, moderate, high
  readinessForNextLevel Boolean  @default(false)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([userId, quizSetId])
}
